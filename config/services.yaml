# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    privateKey: '%kernel.project_dir%/keys/private.key'
    publicKey: '%kernel.project_dir%/keys/public.key'
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Cerberus\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php,OAuth,Security}'

    Cerberus\OAuth\Repository\:
        resource: '../src/OAuth/Repository/*'

    Cerberus\OAuth\Service\:
        resource: '../src/OAuth/Service/*'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Cerberus\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    Cerberus\Hasher\HasherInterface: '@Cerberus\Hasher\ArgonPasswordHasher'
    Cerberus\OAuth\Repository\Client\ClientRepositoryInterface: '@Cerberus\OAuth\Repository\Client\MongoClientRepository'

    Cerberus\Security\Listener\OAuthListener:
        arguments:
            - '@security.token_storage'
            - '@security.authentication.manager'

    Cerberus\Security\Provider\OAuthProvider: ~
    Cerberus\Security\Handler\AccessDeniedHandler: ~

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    League\OAuth2\Server\Repositories\ClientRepositoryInterface: '@Cerberus\OAuth\Repository\Client\ClientRepositoryInterface'
    League\OAuth2\Server\Repositories\AccessTokenRepositoryInterface: '@Cerberus\OAuth\Repository\AccessToken\InMemoryAccessTokenRepository'
    League\OAuth2\Server\Repositories\ScopeRepositoryInterface: '@Cerberus\OAuth\Repository\Scope\InMemoryScopeRepository'
    League\OAuth2\Server\Repositories\UserRepositoryInterface: '@Cerberus\OAuth\Repository\User\InMemoryUserRepository'
    League\OAuth2\Server\Repositories\RefreshTokenRepositoryInterface: '@Cerberus\OAuth\Repository\RefreshToken\InMemoryRefreshTokenRepository'

    League\OAuth2\Server\Grant\ClientCredentialsGrant: ~
    League\OAuth2\Server\Grant\PasswordGrant: ~
    League\OAuth2\Server\Grant\RefreshTokenGrant: ~

    League\OAuth2\Server\AuthorizationServer:
        arguments:
            - '@League\OAuth2\Server\Repositories\ClientRepositoryInterface'
            - '@League\OAuth2\Server\Repositories\AccessTokenRepositoryInterface'
            - '@League\OAuth2\Server\Repositories\ScopeRepositoryInterface'
            - '%privateKey%'
            - '%env(APP_SECRET)%'
        calls:
            - method: enableGrantType
              arguments:
                - '@League\OAuth2\Server\Grant\ClientCredentialsGrant'
            - method: enableGrantType
              arguments:
                - '@League\OAuth2\Server\Grant\PasswordGrant'
            - method: enableGrantType
              arguments:
                - '@League\OAuth2\Server\Grant\RefreshTokenGrant'

    League\OAuth2\Server\ResourceServer:
        arguments:
            - '@League\OAuth2\Server\Repositories\AccessTokenRepositoryInterface'
            - '%publicKey%'

    Zend\Diactoros\Response: ~
    Psr\Http\Message\ResponseInterface: '@Zend\Diactoros\Response'